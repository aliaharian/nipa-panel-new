{"version":3,"file":"static/js/4648.a5003195.chunk.js","mappings":"8IAgEA,SACEA,WA7DFC,iBAA6B,IAADC,EAC1B,IAAIC,QAAsB,QAAXD,GAAME,EAAAA,EAAAA,YAAK,IAAAF,OAAA,EAALA,EAAOG,IAAI,WAChC,OAAe,OAARF,QAAQ,IAARA,OAAQ,EAARA,EAAUG,IACnB,EA2DEC,YA3BFN,eAA2BO,GAQvB,IAADC,EACD,IAAIN,QAAsB,QAAXM,GAAML,EAAAA,EAAAA,YAAK,IAAAK,OAAA,EAALA,EAAOC,KAAK,SAAUF,IAC3C,OAAe,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUG,IACnB,EAiBEK,iBAjDFV,eAAgCW,GAA2B,IAADC,EACxD,IAAIV,QAAsB,QAAXU,GAAMT,EAAAA,EAAAA,YAAK,IAAAS,OAAA,EAALA,EAAOH,KAAK,cAAe,CAC9CI,cAAeF,KAEjB,OAAe,OAART,QAAQ,IAARA,OAAQ,EAARA,EAAUG,IACnB,EA6CES,gBAvDFd,iBAAkC,IAADe,EAC/B,IAAIb,QAAsB,QAAXa,GAAMZ,EAAAA,EAAAA,YAAK,IAAAY,OAAA,EAALA,EAAOX,IAAI,gBAChC,OAAe,OAARF,QAAQ,IAARA,OAAQ,EAARA,EAAUG,IACnB,EAqDEW,YA7DFhB,eAA2BiB,GAAkB,IAADC,EAC1C,IAAIhB,QAAsB,QAAXgB,GAAMf,EAAAA,EAAAA,YAAK,IAAAe,OAAA,EAALA,EAAOd,IAAI,UAAYa,IAC5C,OAAe,OAARf,QAAQ,IAARA,OAAQ,EAARA,EAAUG,IACnB,EA2DEc,gBAlBFnB,eAA+BiB,GAAkB,IAADG,EAC9C,IAAIlB,QAAsB,QAAXkB,GAAMjB,EAAAA,EAAAA,YAAK,IAAAiB,OAAA,EAALA,EAAOhB,IAAI,UAAYa,EAAU,cACtD,OAAe,OAARf,QAAQ,IAARA,OAAQ,EAARA,EAAUG,IACnB,EAgBEgB,YAdFrB,eAA2BsB,EAAgBL,GAAkB,IAADM,EAC1D,IAAIrB,QAAsB,QAAXqB,GAAMpB,EAAAA,EAAAA,YAAK,IAAAoB,OAAA,EAALA,EAAOnB,IAC1B,SAAWkB,EAAS,IAAML,EAAU,cAEtC,OAAe,OAARf,QAAQ,IAARA,OAAQ,EAARA,EAAUG,IACnB,E,mLC3CA,MAgOA,EAhO0BmB,KAAO,IAADC,EAC9B,MAAMC,GAAWC,EAAAA,EAAAA,OACX,EAAEC,IAAMC,EAAAA,EAAAA,MACd,IAAI,QAAEZ,EAAO,OAAEK,IAAWQ,EAAAA,EAAAA,KAC1B,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAQC,IAAaF,EAAAA,EAAAA,UAAsB,KAC3CG,EAAMC,IAAWJ,EAAAA,EAAAA,aACjBK,EAAWC,IAAgBN,EAAAA,EAAAA,aAC3BO,EAAYC,IAAiBR,EAAAA,EAAAA,UAAgB,KAE7CS,EAAkBC,IAAuBV,EAAAA,EAAAA,aACzCW,EAAeC,IAAoBZ,EAAAA,EAAAA,YAEpCa,GAASC,EAAAA,EAAAA,IAAU,CACvBH,gBACAF,mBACAM,oBAAoB,EACpBC,SAAUjD,UAER,GADAkD,QAAQC,IAAI,QAASf,GACjBnB,GAAWmB,EAAM,CACnBJ,GAAW,SACaoB,EAAAA,EAAYC,cAClCC,SAASrC,GACTmB,EAAKmB,GACLC,GAGFxB,GAAW,GACXyB,EAAAA,EAAcC,QAAQ9B,EAAE,sBACxBF,EAAS,WACX,MAGJiC,EAAAA,EAAAA,YAAU,KACRT,QAAQC,IAAI,UAAWjB,GACvBW,GAAiBe,EAAAA,EAAAA,IAAwB1B,IACzCS,EACEkB,EAAAA,KAAaC,OAAMC,EAAAA,EAAAA,IAAqB7B,EAAQM,EAAYM,IAC7D,GAQA,CAACZ,EAAQM,KAEZmB,EAAAA,EAAAA,YAAU,KAERK,GAAU,GACT,IAGH,MAAMA,EAAWhE,UAAa,IAADiE,EAC3B,IAAI3B,QAAkB4B,EAAAA,EAAa7C,YACjC8C,OAAO7C,GACP6C,OAAOlD,IAETsB,EAAaD,GAEb,MAAMpC,QAAiBkD,EAAAA,EAAYgB,QAAiB,OAAT9B,QAAS,IAATA,OAAS,EAATA,EAAWF,KAAKmB,GAAItC,GAC/DoB,EAAQnC,GAER,IAAImE,EAAmB,GACR,QAAfJ,EAAA/D,EAASgC,cAAM,IAAA+B,GAAfA,EAAiBK,KAAKC,IAAe,IAADC,EAAAC,EAClC,IAAIC,EAAW,CACbC,IAAKJ,EAAKhB,GACVqB,KAAML,EAAKK,KACXC,YAAaN,EAAKM,YAClBC,MAAOP,EAAKO,MACZC,KAAMR,EAAKQ,KAAKA,KAChBC,OAAQT,EAAKQ,KAAKxB,GAClB0B,SAAUV,EAAKU,SACfC,OAAQX,EAAKY,WACb5B,GAAIgB,EAAKhB,GACT6B,oBACM,OAAJb,QAAI,IAAJA,GAAU,QAANC,EAAJD,EAAMnC,YAAI,IAAAoC,IAAVA,EAAYjB,KAAU,OAAJgB,QAAI,IAAJA,GAAU,QAANE,EAAJF,EAAMnC,YAAI,IAAAqC,OAAN,EAAJA,EAAYlB,MAAc,OAARrD,QAAQ,IAARA,OAAQ,EAARA,EAAUqD,MAsCZ,IAAD8B,GAnCd,aAAnBd,EAAKQ,KAAKA,MAA0C,aAAnBR,EAAKQ,KAAKA,OAE3CL,EADEH,EAAKe,cACD,IACDZ,EACHa,WAAYhB,EAAKgB,WACjBD,cAAef,EAAKe,cACpBE,eAAgBjB,EAAKiB,eAAelB,KAAKmB,IAAQ,CAC/Cd,IAAKc,EAAIlC,GACTA,GAAIkC,EAAIlC,GACRuB,OAAOY,EAAAA,EAAAA,KAAA,KAAAC,SAAIF,EAAIX,QACfc,UAAWH,EAAIlC,GACfsC,MAAOJ,EAAIK,WAEbZ,OAAQX,EAAKY,YAMT,IACDT,EACHqB,QAASxB,EAAKwB,QAAQzB,KAAKmB,IAAQ,CACjClC,GAAIkC,EAAIlC,GACRoB,IAAKc,EAAIlC,GACTuB,OAAOY,EAAAA,EAAAA,KAAA,KAAAC,SAAIF,EAAIX,QACfc,UAAWH,EAAIlC,GACfsC,MAAOJ,EAAIK,OACXZ,OAAQX,EAAKY,iBAQE,eAAnBZ,EAAKQ,KAAKA,QACZL,EAAM,IACDA,EACHsB,UAAsC,QAA7BX,EAAEY,KAAKC,MAAM3B,EAAK4B,mBAAW,IAAAd,OAAA,EAA3BA,EAA6BW,UACxChE,WAAYA,EACZoE,SAAS,IAGb/B,EAAUgC,KAAK,IAAK3B,GAAM,IAE5BjC,EAAc,IAAIvC,EAASsC,aAE3BL,EAAU,IAAIkC,GAAW,EAU3B,OACEiC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeZ,SAAA,EAC5BD,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,OAAgB,OAATnE,QAAS,IAATA,GAAe,QAANb,EAATa,EAAWoE,YAAI,IAAAjF,OAAN,EAATA,EAAiBkF,YAAa,GACrCC,WAAYA,IAAMlF,EAAS,cAE7BgE,EAAAA,EAAAA,KAAA,OAAKa,UAAS,2BAA6BZ,UACzCD,EAAAA,EAAAA,KAAA,OACEa,UAAS,iFAAmFZ,UAE5FW,EAAAA,EAAAA,MAAA,QAAMrD,SAAUH,EAAO+D,aAAalB,SAAA,CACjC5D,IAAW2D,EAAAA,EAAAA,KAACoB,EAAAA,EAAiB,KAC9BpB,EAAAA,EAAAA,KAAA,OAAAC,SACGzD,GACCY,IACM,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQU,SACRuD,OAAOC,KAAW,OAANlE,QAAM,IAANA,OAAM,EAANA,EAAQU,QAAQyD,OAAS,GACrC/E,EAAOoC,KAAI,CAAC4C,EAAcC,KACxB,MAAMC,EAAO5E,EAAW6E,MACrBC,GAAMA,EAAEC,0BAA4BL,EAAQ3D,KAE/C,IAAIiE,GAAW,EACf,GAAIJ,EAAM,CAER,MAAMK,EAAYvF,EAAOmF,MACtBC,GAAMA,EAAE/D,IAAM6D,EAAKM,gBAEtB,IAAIjC,EAE4B,IAADkC,EAItBC,EAOkBC,EASlBC,EArBT,GAAIL,EACF,GAAIA,EAAUnC,cACZG,EAAe,OAATgC,QAAS,IAATA,GAAyB,QAAhBE,EAATF,EAAWjC,sBAAc,IAAAmC,OAAhB,EAATA,EAA2BN,MAC9BC,GAAMA,EAAE1B,WAAawB,EAAKW,4BAG7BtC,EAAe,OAATgC,QAAS,IAATA,GAAkB,QAATG,EAATH,EAAW1B,eAAO,IAAA6B,OAAT,EAATA,EAAoBP,MACvBC,GAAMA,EAAE1B,WAAawB,EAAKW,uBAIjC,GAAIN,GAAahC,EACf,GAAsB,GAAlB2B,EAAKY,UAKLR,EAHA1E,EAAOU,OAAOiE,EAAU7C,QAAUa,EAAII,QACT,QAA7BgC,EAAA/E,EAAOU,OAAOiE,EAAU7C,aAAK,IAAAiD,OAAA,EAA7BA,EAA+BI,QAAQxC,EAAII,SAAU,OAgBrD2B,IAPE1E,EAAOU,OAAOiE,EAAU7C,QAAUa,EAAII,QACT,QAA7BiC,EAAAhF,EAAOU,OAAOiE,EAAU7C,aAAK,IAAAkD,OAAA,EAA7BA,EAA+BG,QAAQxC,EAAII,SACxC,EASb,CAEA,OAAO2B,GACL9B,EAAAA,EAAAA,KAAA,OAAKa,UAAU,YAAWZ,UACvBuC,EAAAA,EAAAA,IAAchB,GAAS,QAAUpE,IADJqE,IAIhCzB,EAAAA,EAAAA,KAAAyC,EAAAA,SAAA,GACD,OAGPzC,EAAAA,EAAAA,KAAA,OAAKa,UAAU,YAAWZ,UACxBD,EAAAA,EAAAA,KAAC0C,EAAAA,EAAM,CACLC,OAAK,EACLC,QAjFWC,KACvBrF,QAAQC,IAAI,QAASL,EAAOU,OAAO,EAiFvBgF,KAAM5G,EAAE,4BAMd,C","sources":["app/redux/orders/service.ts","pages/orders/ShowOrderStepForm.tsx"],"sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\n\nimport Api from \"../../../app/service/Api\";\n\nasync function ordersList() {\n  let response = await Api()?.get(\"/order\");\n  return response?.data;\n}\nasync function orderDetail(orderId: number) {\n  let response = await Api()?.get(\"/order/\" + orderId);\n  return response?.data;\n}\n\nasync function orderGroupsList() {\n  let response = await Api()?.get(\"/orderGroup\");\n  return response?.data;\n}\n\nasync function createOrderGroup(selectedCustomer: string) {\n  let response = await Api()?.post(\"/orderGroup\", {\n    customer_code: selectedCustomer,\n  });\n  return response?.data;\n}\n\n// async function createOrder(\n//   orderGroupId: number,\n//   productId: number,\n//   count: number,\n//   customerName?: string\n// ) {\n//   let response = await Api()?.post(\"/order\", {\n//     product_id: productId,\n//     order_group_id: orderGroupId,\n//     customer_name: customerName,\n//     count: count,\n//   });\n//   return response?.data;\n// }\nasync function createOrder(request: {\n  customer_code: string;\n  orders?: {\n    count: number;\n    product_id: number;\n    form_id?: number | null;\n    data?: any;\n  }[];\n}) {\n  let response = await Api()?.post(\"/order\", request);\n  return response?.data;\n}\n\nasync function getCompleteInfo(orderId: number) {\n  let response = await Api()?.get(\"/order/\" + orderId + \"/complete\");\n  return response?.data;\n}\n\nasync function getStepInfo(stepId: number, orderId: number) {\n  let response = await Api()?.get(\n    \"/step/\" + stepId + \"/\" + orderId + \"/complete\"\n  );\n  return response?.data;\n}\n\nexport default {\n  ordersList,\n  createOrder,\n  createOrderGroup,\n  orderGroupsList,\n  orderDetail,\n  getCompleteInfo,\n  getStepInfo,\n};\n","import FullscreenLoading from \"components/loading/FullscreenLoading\";\nimport Breadcrumb from \"components/breadcrumb/Breadcrumb\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport DropDown from \"components/form/Dropdown\";\nimport { FormField } from \"app/models/form\";\nimport {\n  renderElement,\n  renderFormInitialValues,\n  renderFormValidation,\n} from \"app/utils/FormActions\";\nimport orderService from \"app/redux/orders/service\";\nimport formService from \"app/redux/forms/service\";\nimport * as Yup from \"yup\";\nimport Button from \"components/button/Button\";\nimport SnackbarUtils from \"app/utils/SnackbarUtils\";\n\nconst ShowOrderStepForm = () => {\n  const Navigate = useNavigate();\n  const { t } = useTranslation();\n  let { orderId, stepId } = useParams();\n  const [pending, setPending] = useState(false);\n  const [fields, setFields] = useState<FormField[]>([]);\n  const [form, setForm] = useState<any>();\n  const [orderData, setOrderData] = useState<any>();\n  const [conditions, setConditions] = useState<any[]>([]);\n\n  const [validationSchema, setValidationSchema] = useState<any>();\n  const [initialValues, setInitialValues] = useState<any>();\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: async (values) => {\n      console.log(\"done!\", form);\n      if (orderId && form) {\n        setPending(true);\n        const savedForm = await formService.addUserAnswer(\n          parseInt(orderId),\n          form.id,\n          values\n        );\n        //change state to next step!\n        setPending(false);\n        SnackbarUtils.success(t(\"submitFormSuccess\"));\n        Navigate(`/orders/`);\n      }\n    },\n  });\n  useEffect(() => {\n    console.log(\"called!\", fields)\n    setInitialValues(renderFormInitialValues(fields));\n    setValidationSchema(\n      Yup.object().shape(renderFormValidation(fields, conditions, formik))\n    );\n    // if (formik.values) {\n    //   fields?.map((field) => {\n    //     if (field.answer) {\n    //       formik.setFieldValue(field.name, field.answer);\n    //     }\n    //   });\n    // }\n  }, [fields, conditions]);\n\n  useEffect(() => {\n    ////\n    loadForm();\n  }, []);\n  // console.log(\"initial\",initialValues)\n\n  const loadForm = async () => {\n    let orderData = await orderService.getStepInfo(\n      Number(stepId),\n      Number(orderId)\n    );\n    setOrderData(orderData);\n\n    const response = await formService.getForm(orderData?.form.id, orderId);\n    setForm(response);\n\n    let fieldsTmp: any[] = [];\n    response.fields?.map((item: any) => {\n      let tmp: any = {\n        key: item.id,\n        name: item.name,\n        placeholder: item.placeholder,\n        label: item.label,\n        type: item.type.type,\n        typeId: item.type.id,\n        required: item.required,\n        answer: item.userAnswer,\n        id: item.id,\n        fromRelatedFields:\n          item?.form?.id && item?.form?.id != response?.id ? true : false,\n      };\n\n      if (item.type.type === \"dropDown\" || item.type.type === \"checkbox\") {\n        if (item.basic_data_id) {\n          tmp = {\n            ...tmp,\n            basic_data: item.basic_data,\n            basic_data_id: item.basic_data_id,\n            basicDataItems: item.basicDataItems.map((opt: any) => ({\n              key: opt.id,\n              id: opt.id,\n              label: <p>{opt.label}</p>,\n              server_id: opt.id,\n              value: opt.option,\n            })),\n            answer: item.userAnswer,\n            // answer: item.basicDataItems.find(\n            //   (x: any) => x.option === item.userAnswer\n            // ),\n          };\n        } else {\n          tmp = {\n            ...tmp,\n            options: item.options.map((opt: any) => ({\n              id: opt.id,\n              key: opt.id,\n              label: <p>{opt.label}</p>,\n              server_id: opt.id,\n              value: opt.option,\n              answer: item.userAnswer,\n              // answer: item.options.find(\n              //   (x: any) => x.option === item.userAnswer\n              // ),\n            })),\n          };\n        }\n      }\n      if (item.type.type === \"uploadFile\") {\n        tmp = {\n          ...tmp,\n          onlyImage: JSON.parse(item.validation)?.onlyImage,\n          setPending: setPending,\n          noBadge: true,\n        };\n      }\n      fieldsTmp.push({ ...tmp });\n    });\n    setConditions([...response.conditions]);\n\n    setFields([...fieldsTmp]);\n    //do another works\n\n\n  };\n\n  const handleSubmitForm = () => {\n    console.log(\"formi\", formik.values);\n    // formik.handleSubmit(formik.values);\n  };\n  return (\n    <div className=\"w-full h-full\">\n      <Breadcrumb\n        title={orderData?.step?.step_name || \"\"}\n        handleBack={() => Navigate(\"/orders\")}\n      />\n      <div className={`w-full flex gap-x-[20px]`}>\n        <div\n          className={`w-full bg-white border border-text-300 h-min rounded-[6px] px-[20px] py-[24px]`}\n        >\n          <form onSubmit={formik.handleSubmit}>\n            {pending && <FullscreenLoading />}\n            <div>\n              {fields &&\n                formik &&\n                formik?.values &&\n                Object.keys(formik?.values).length > 0 &&\n                fields.map((element: any, index: number) => {\n                  const cond = conditions.find(\n                    (x) => x.relational_form_field_id == element.id\n                  );\n                  let showItem = true;\n                  if (cond) {\n                    //check conditions\n                    const mainField = fields.find(\n                      (x) => x.id == cond.form_field_id\n                    );\n                    let opt;\n                    if (mainField) {\n                      if (mainField.basic_data_id) {\n                        opt = mainField?.basicDataItems?.find(\n                          (x) => x.server_id == cond.form_field_option_id\n                        );\n                      } else {\n                        opt = mainField?.options?.find(\n                          (x) => x.server_id == cond.form_field_option_id\n                        );\n                      }\n                    }\n                    if (mainField && opt) {\n                      if (cond.operation == 1) {\n                        if (\n                          formik.values[mainField.name] === opt.value ||\n                          formik.values[mainField.name]?.indexOf(opt.value) > -1\n                        ) {\n                          showItem = true;\n                        } else {\n                          showItem = false;\n                        }\n                      } else {\n                        if (\n                          !(\n                            formik.values[mainField.name] === opt.value ||\n                            formik.values[mainField.name]?.indexOf(opt.value) >\n                              -1\n                          )\n                        ) {\n                          showItem = true;\n                        } else {\n                          showItem = false;\n                        }\n                      }\n                    }\n                  }\n\n                  return showItem ? (\n                    <div className=\"mt-[30px]\" key={index}>\n                      {renderElement(element, () => {}, formik)}\n                    </div>\n                  ) : (\n                    <></>\n                  );\n                })}\n            </div>\n            <div className=\"mt-[32px]\">\n              <Button\n                after\n                onClick={handleSubmitForm}\n                text={t(\"submitForm2\")}\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default ShowOrderStepForm;\n"],"names":["ordersList","async","_Api","response","Api","get","data","createOrder","request","_Api5","post","createOrderGroup","selectedCustomer","_Api4","customer_code","orderGroupsList","_Api3","orderDetail","orderId","_Api2","getCompleteInfo","_Api6","getStepInfo","stepId","_Api7","ShowOrderStepForm","_orderData$step","Navigate","useNavigate","t","useTranslation","useParams","pending","setPending","useState","fields","setFields","form","setForm","orderData","setOrderData","conditions","setConditions","validationSchema","setValidationSchema","initialValues","setInitialValues","formik","useFormik","enableReinitialize","onSubmit","console","log","formService","addUserAnswer","parseInt","id","values","SnackbarUtils","success","useEffect","renderFormInitialValues","Yup","shape","renderFormValidation","loadForm","_response$fields","orderService","Number","getForm","fieldsTmp","map","item","_item$form","_item$form2","tmp","key","name","placeholder","label","type","typeId","required","answer","userAnswer","fromRelatedFields","_JSON$parse","basic_data_id","basic_data","basicDataItems","opt","_jsx","children","server_id","value","option","options","onlyImage","JSON","parse","validation","noBadge","push","_jsxs","className","Breadcrumb","title","step","step_name","handleBack","handleSubmit","FullscreenLoading","Object","keys","length","element","index","cond","find","x","relational_form_field_id","showItem","mainField","form_field_id","_mainField$basicDataI","_mainField$options","_formik$values$mainFi","_formik$values$mainFi2","form_field_option_id","operation","indexOf","renderElement","_Fragment","Button","after","onClick","handleSubmitForm","text"],"sourceRoot":""}