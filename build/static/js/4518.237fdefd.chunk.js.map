{"version":3,"file":"static/js/4518.237fdefd.chunk.js","mappings":"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","sources":["app/redux/orders/service.ts","pages/orders/CompleteOrder.tsx"],"sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\n\nimport Api from \"../../../app/service/Api\";\n\nasync function ordersList() {\n  let response = await Api()?.get(\"/order\");\n  return response?.data;\n}\nasync function orderDetail(orderId: number) {\n  let response = await Api()?.get(\"/order/\" + orderId);\n  return response?.data;\n}\n\nasync function orderGroupsList() {\n  let response = await Api()?.get(\"/orderGroup\");\n  return response?.data;\n}\n\nasync function createOrderGroup(selectedCustomer: string) {\n  let response = await Api()?.post(\"/orderGroup\", {\n    customer_code: selectedCustomer,\n  });\n  return response?.data;\n}\n\n// async function createOrder(\n//   orderGroupId: number,\n//   productId: number,\n//   count: number,\n//   customerName?: string\n// ) {\n//   let response = await Api()?.post(\"/order\", {\n//     product_id: productId,\n//     order_group_id: orderGroupId,\n//     customer_name: customerName,\n//     count: count,\n//   });\n//   return response?.data;\n// }\nasync function createOrder(request: {\n  customer_code: string;\n  orders?: {\n    count: number;\n    product_id: number;\n    form_id?: number | null;\n    data?: any;\n  }[];\n}) {\n  let response = await Api()?.post(\"/order\", request);\n  return response?.data;\n}\n\nasync function getCompleteInfo(orderId: number) {\n  let response = await Api()?.get(\"/order/\" + orderId + \"/complete\");\n  return response?.data;\n}\n\nasync function getStepInfo(stepId: number, orderId: number) {\n  let response = await Api()?.get(\n    \"/step/\" + stepId + \"/\" + orderId + \"/complete\"\n  );\n  return response?.data;\n}\n\nexport default {\n  ordersList,\n  createOrder,\n  createOrderGroup,\n  orderGroupsList,\n  orderDetail,\n  getCompleteInfo,\n  getStepInfo,\n};\n","import FullscreenLoading from \"components/loading/FullscreenLoading\";\nimport Breadcrumb from \"components/breadcrumb/Breadcrumb\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport DropDown from \"components/form/Dropdown\";\nimport { FormField } from \"app/models/form\";\nimport {\n  renderElement,\n  renderFormInitialValues,\n  renderFormValidation,\n} from \"app/utils/FormActions\";\nimport orderService from \"app/redux/orders/service\";\nimport formService from \"app/redux/forms/service\";\nimport * as Yup from \"yup\";\nimport Button from \"components/button/Button\";\n\nconst CompleteOrder = () => {\n  const Navigate = useNavigate();\n  const { t } = useTranslation();\n  let { orderId } = useParams();\n  const [pending, setPending] = useState(false);\n  const [fields, setFields] = useState<FormField[]>([]);\n  const [form, setForm] = useState<any>();\n  const [orderData, setOrderData] = useState<any>();\n  const [conditions, setConditions] = useState<any[]>([]);\n\n  const [validationSchema, setValidationSchema] = useState<any>();\n  const [initialValues, setInitialValues] = useState<any>();\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: async (values) => {\n      console.log(\"done!\", form);\n      if (orderId && form) {\n        setPending(true);\n        const savedForm = await formService.addUserAnswer(\n          parseInt(orderId),\n          form.id,\n          values\n        );\n        //change state to next step!\n        setPending(false);\n      }\n    },\n  });\n  useEffect(() => {\n    setInitialValues(renderFormInitialValues(fields));\n    setValidationSchema(\n      Yup.object().shape(renderFormValidation(fields, conditions, formik))\n    );\n    if (formik.values) {\n      fields?.map((field) => {\n        if (field.answer) {\n          formik.setFieldValue(field.name, field.answer);\n        }\n      });\n    }\n  }, [fields, formik.values, conditions]);\n\n  useEffect(() => {\n    ////\n    loadForm();\n  }, []);\n\n  const loadForm = async () => {\n    let orderData = await orderService.getCompleteInfo(Number(orderId));\n    setOrderData(orderData);\n\n    const response = await formService.getForm(orderData?.form.id, orderId);\n    setForm(response);\n\n    let fieldsTmp: any[] = [];\n    response.fields?.map((item: any) => {\n      let tmp: any = {\n        key: item.id,\n        name: item.name,\n        placeholder: item.placeholder,\n        label: item.label,\n        type: item.type.type,\n        typeId: item.type.id,\n        required: item.required,\n        answer: item.userAnswer,\n        id: item.id,\n        fromRelatedFields:\n          item?.form?.id && item?.form?.id != response?.id ? true : false,\n      };\n\n      if (item.type.type === \"dropDown\" || item.type.type === \"checkbox\") {\n        if (item.basic_data_id) {\n          tmp = {\n            ...tmp,\n            basic_data: item.basic_data,\n            basic_data_id: item.basic_data_id,\n            basicDataItems: item.basicDataItems.map((opt: any) => ({\n              key: opt.id,\n              id: opt.id,\n              label: <p>{opt.label}</p>,\n              server_id: opt.id,\n              value: opt.option,\n            })),\n            answer: item.userAnswer,\n            // answer: item.basicDataItems.find(\n            //   (x: any) => x.option === item.userAnswer\n            // ),\n          };\n        } else {\n          tmp = {\n            ...tmp,\n            options: item.options.map((opt: any) => ({\n              id: opt.id,\n              key: opt.id,\n              label: <p>{opt.label}</p>,\n              server_id: opt.id,\n              value: opt.option,\n              answer: item.userAnswer,\n              // answer: item.options.find(\n              //   (x: any) => x.option === item.userAnswer\n              // ),\n            })),\n          };\n        }\n      }\n      if (item.type.type === \"uploadFile\") {\n        tmp = {\n          ...tmp,\n          onlyImage: JSON.parse(item.validation)?.onlyImage,\n          setPending: setPending,\n          noBadge: true,\n        };\n      }\n      fieldsTmp.push({ ...tmp });\n    });\n    setConditions([...response.conditions]);\n\n    setFields([...fieldsTmp]);\n  };\n\n  const handleSubmitForm = () => {\n    console.log(\"formi\", formik.values);\n    // formik.handleSubmit(formik.values);\n  };\n  return (\n    <div className=\"w-full h-full\">\n      <Breadcrumb title=\"تکمیل سفارش\" handleBack={() => Navigate(\"/orders\")} />\n      <div className={`w-full flex gap-x-[20px]`}>\n        <div\n          className={`w-full bg-white border border-text-300 h-min rounded-[6px] px-[20px] py-[24px]`}\n        >\n          <form onSubmit={formik.handleSubmit}>\n            {pending && <FullscreenLoading />}\n            <div>\n              {fields &&\n                formik &&\n                formik?.values &&\n                Object.keys(formik?.values).length > 0 &&\n                fields.map((element: any, index: number) => {\n                  const cond = conditions.find(\n                    (x) => x.relational_form_field_id == element.id\n                  );\n                  let showItem = true;\n                  if (cond) {\n                    //check conditions\n                    const mainField = fields.find(\n                      (x) => x.id == cond.form_field_id\n                    );\n                    let opt;\n                    if (mainField) {\n                      if (mainField.basic_data_id) {\n                        opt = mainField?.basicDataItems?.find(\n                          (x) => x.server_id == cond.form_field_option_id\n                        );\n                      } else {\n                        opt = mainField?.options?.find(\n                          (x) => x.server_id == cond.form_field_option_id\n                        );\n                      }\n                    }\n                    if (mainField && opt) {\n                      if (cond.operation == 1) {\n                        if (\n                          formik.values[mainField.name] === opt.value ||\n                          formik.values[mainField.name]?.indexOf(opt.value) > -1\n                        ) {\n                          showItem = true;\n                        } else {\n                          showItem = false;\n                        }\n                      } else {\n                        if (\n                          !(\n                            formik.values[mainField.name] === opt.value ||\n                            formik.values[mainField.name]?.indexOf(opt.value) >\n                              -1\n                          )\n                        ) {\n                          showItem = true;\n                        } else {\n                          showItem = false;\n                        }\n                      }\n                    }\n                  }\n\n                  return showItem ? (\n                    <div className=\"mt-[30px]\" key={index}>\n                      {renderElement(element, () => {}, formik)}\n                    </div>\n                  ) : (\n                    <></>\n                  );\n                })}\n            </div>\n            <div className=\"mt-[32px]\">\n              <Button\n                after\n                onClick={handleSubmitForm}\n                text={t(\"submitForm2\")}\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default CompleteOrder;\n"],"names":["ordersList","async","_Api","response","Api","get","data","createOrder","request","_Api5","post","createOrderGroup","selectedCustomer","_Api4","customer_code","orderGroupsList","_Api3","orderDetail","orderId","_Api2","getCompleteInfo","_Api6","getStepInfo","stepId","_Api7","CompleteOrder","Navigate","useNavigate","t","useTranslation","useParams","pending","setPending","useState","fields","setFields","form","setForm","orderData","setOrderData","conditions","setConditions","validationSchema","setValidationSchema","initialValues","setInitialValues","formik","useFormik","enableReinitialize","onSubmit","console","log","formService","addUserAnswer","parseInt","id","values","useEffect","renderFormInitialValues","Yup","shape","renderFormValidation","map","field","answer","setFieldValue","name","loadForm","_response$fields","orderService","Number","getForm","fieldsTmp","item","_item$form","_item$form2","tmp","key","placeholder","label","type","typeId","required","userAnswer","fromRelatedFields","_JSON$parse","basic_data_id","basic_data","basicDataItems","opt","_jsx","children","server_id","value","option","options","onlyImage","JSON","parse","validation","noBadge","push","_jsxs","className","Breadcrumb","title","handleBack","handleSubmit","FullscreenLoading","Object","keys","length","element","index","cond","find","x","relational_form_field_id","showItem","mainField","form_field_id","_mainField$basicDataI","_mainField$options","_formik$values$mainFi","_formik$values$mainFi2","form_field_option_id","operation","indexOf","renderElement","_Fragment","Button","after","onClick","handleSubmitForm","text"],"sourceRoot":""}